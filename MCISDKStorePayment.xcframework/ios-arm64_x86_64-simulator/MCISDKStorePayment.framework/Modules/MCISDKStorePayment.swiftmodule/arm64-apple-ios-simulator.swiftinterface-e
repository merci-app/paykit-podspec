// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MCISDKStorePayment
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import Foundation
import Kingfisher
import MCISDKCheckoutCore
import MCISDKFoundation
import MCISDKIssuerViewerCore
import MCISDKKit
import MCISDKLogger
@_exported import MCISDKStorePayment
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers final public class PayConfig {
  public static let shared: PayConfig
  final public var isSDK: Swift.Bool
  final public var shouldShowOnboarding: Swift.Bool
  final public var payTextButton: Swift.String?
  final public var imageBanner: UIKit.UIImage?
  final public var imageOnboardingFirst: UIKit.UIImage?
  final public var imageOnboardingSecond: UIKit.UIImage?
  final public var imageOnboardingThird: UIKit.UIImage?
  final public var imageStoresEmpty: UIKit.UIImage?
  final public var imageAvailableAccounts: UIKit.UIImage?
  final public var imageQr: UIKit.UIImage?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class PayRootVC : MCISDKKit.MCIViewController, MCISDKKit.Identifiable {
  @_Concurrency.MainActor(unsafe) final public var account: MCIAccount?
  @_Concurrency.MainActor(unsafe) final public var action: MCIAccountWalletAction?
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public struct MCISDKStorePayment : StorePaymentInjectable {
  public init()
  public func present(_ controller: UIKit.UIViewController, transition: UIKit.UIModalTransitionStyle, completion: (() -> Swift.Void)?)
  public func embed(transition: UIKit.UIModalTransitionStyle, title: Swift.String, tabImage: UIKit.UIImage) -> UIKit.UIViewController
}
extension UIKit.UIStoryboard {
  @_Concurrency.MainActor(unsafe) public class var pay: UIKit.UIStoryboard {
    get
  }
}
public protocol PayAccountCollectionTableCellDelegate : AnyObject {
  func accountCollectionTableCell(_ cell: PayAccountCollectionTableCell, didSelectAccount account: MCIAccount)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class PayAccountCollectionTableCell : UIKit.UITableViewCell, MCISDKKit.Identifiable, MCISDKKit.NibReusable {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: PayAccountCollectionTableCellDelegate?
  @_Concurrency.MainActor(unsafe) @objc override final public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override final public func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) final public func configure(with accounts: [MCIAccount]?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayAccountCollectionTableCell : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension PayAccountCollectionTableCell : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class PayAccountBannerTableCell : UIKit.UITableViewCell, MCISDKKit.Identifiable, MCISDKKit.NibReusable {
  @_Concurrency.MainActor(unsafe) final public func configure(with image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
